
# import tkinter as tk
# from tkinter import ttk
# from tkinter import filedialog
# import pandas as pd
# from pandastable import Table
# from ttkbootstrap.constants import *
# import ttkbootstrap as tb
# import matplotlib.pyplot as plt

# data = None  # Global variable to store loaded data

# def load_csv():
#     """Load a CSV file and display its contents."""
#     global data  # Use the global variable to store loaded data
#     file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
#     if file_path:
#         try:
#             data = pd.read_csv(file_path, encoding='utf-8')
#         except UnicodeDecodeError:
#             # Try reading with a different encoding (e.g., 'latin-1')
#             data = pd.read_csv(file_path, encoding='latin-1')

#         for widget in table_frame.winfo_children():
#             widget.destroy()
#         table = Table(table_frame, dataframe=data, showtoolbar=True, showstatusbar=True)
#         table.show()

# def filter_and_save():
#     """Filter the loaded data and save it as a new CSV file."""
#     global data  # Access the global variable containing loaded data
#     if data is not None:
#         column_name = column_entry.get()  # Get column name from entry widget
#         filter_condition = filter_entry.get()  # Get filter condition from entry widget
#         result = data[data[column_name] == filter_condition]
#         save_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        
#         if save_path:
#             result.to_csv(save_path, index=False)
#     else:
#         print("Please load a CSV file first.")

# def plot_graph(column_name):
#     """Plot the selected graph based on the column name and graph type."""
#     global data
#     if data is not None and column_name in data.columns:
#         graph_type = graph_type_var.get().lower()
#         plt.figure(figsize=(10, 6))

#         if graph_type == "bar":
#             data[column_name].value_counts().plot(kind='bar')
#         elif graph_type == "line":
#             data[column_name].plot(kind='line')
#         elif graph_type == "scatter":
#             # For scatter plot, dynamically select another column for y-axis if needed
#             # This is an example, adjust according to your application's needs
#             plt.scatter(data.index, data[column_name])  # Assuming index vs. column values for simplicity
#         else:
#             print("Graph type not supported")
#             return

#         plt.title(f'{graph_type.capitalize()} Graph of {column_name}')
#         plt.xlabel('Index')
#         plt.ylabel(column_name)
#         plt.show()
#     else:
#         print("Column not found or data not loaded")

# root = tb.Window(themename="superhero")
# root.title("Southern Utah University - College Sort")
# # root.iconbitmap('gonza/Code/Capstone-Inquiry-Database/favicon.ico')
# root.geometry('500x500')

# header_frame = tk.Frame(root, bg="#990000", height=150)
# header_frame.pack(fill=tk.X, side=tk.TOP)

# footer_frame = tk.Frame(root, bg="#cc0000", height=50)
# footer_frame.pack(fill=tk.X, side=tk.BOTTOM)

# user_label = tk.Label(footer_frame, fg="white", bg="#cc0000", font=("Helvetica", 12))
# user_label.pack(side=tk.LEFT, padx=10)

# upload_button = tk.Button(header_frame, text="Upload CSV", command=load_csv, bg="#0066cc", fg="white", font=("Helvetica", 12), bd=0)
# upload_button.pack(pady=5)

# column_label = tk.Label(header_frame, text="Enter Column Name:", fg="white", bg="#990000", font=("Helvetica", 12))
# column_label.pack(pady=5)

# column_entry = tk.Entry(header_frame, font=("Helvetica", 12))
# column_entry.pack(pady=5)

# filter_label = tk.Label(header_frame, text="Enter Filter Condition:", fg="white", bg="#990000", font=("Helvetica", 12))
# filter_label.pack(pady=5)

# filter_entry = tk.Entry(header_frame, font=("Helvetica", 12))
# filter_entry.pack(pady=5)

# filter_button = tk.Button(header_frame, text="Filter and Save", command=filter_and_save, bg="#0066cc", fg="white", font=("Helvetica", 12), bd=0)
# filter_button.pack(pady=5)

# # Added part for graph type selection and plotting
# graph_type_label = tk.Label(header_frame, text="Select Graph Type:", fg="white", bg="#990000", font=("Helvetica", 12))
# graph_type_label.pack(pady=5)

# graph_types = ["Bar", "Line", "Scatter"]  # Add more types as needed
# graph_type_var = tk.StringVar()
# graph_type_var.set(graph_types[0])  # default value
# graph_type_menu = ttk.OptionMenu(header_frame, graph_type_var, *graph_types)
# graph_type_menu.pack(pady=5)

# plot_graph_button = tk.Button(header_frame, text="Plot Graph", command=lambda: plot_graph(column_entry.get()), bg="#0066cc", fg="white", font=("Helvetica", 12), bd=0)
# plot_graph_button.pack(pady=5)

# table_frame = tk.Frame(root)
# table_frame.pack(fill=tk.BOTH, expand=True)

# root.mainloop()
